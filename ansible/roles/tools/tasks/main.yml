- name: Force IPv4 for APT
  shell: |
    echo 'Acquire::ForceIPv4 "true";' | tee /etc/apt/apt.conf.d/99force-ipv4

- name: Clear out directory for Vundle plugin manager
  file:
    path: /home/kelog/.vim/bundle/Vundle.vim
    state: absent

- name: Install Vundle for Vim plugin management
  git: 
    repo: https://github.com/VundleVim/Vundle.vim.git
    dest: /home/kelog/.vim/bundle/Vundle.vim
    update: false

- name: Install zsh
  apt:
    name: zsh
    state: present
- name: Set zsh as default shell
  user:
    name: kelog
    shell: /bin/zsh

- name: Configure tools on laptop only
  block:
  - name: Install node-exporter
    apt:
      name: prometheus-node-exporter
      state: present
  - name: Enable node-exporter
    systemd:
      name: prometheus-node-exporter
      enabled: true
  - name: Copy Windows reboot script
    copy:
      src: "{{ role_path }}/files/windows-reboot.sh"
      dest: "/usr/local/bin/windows-reboot"
      owner: root
      group: root
      mode: '0770'
  - name: Allow kelog to run windows-reboot as root
    blockinfile:
      path: /etc/sudoers
      block: |
        kelog galera = (root) NOPASSWD: /usr/local/bin/windows-reboot
  - name: Copy extra scripts for laptop only
    copy:
      src: "{{ role_path }}/files/{{ item }}"
      dest: /home/kelog/bin/
      owner: kelog
      mode: "0755"
    with_items:
    - backup-xz.sh
    - mute-audio.sh
  when: inventory_hostname == 'dell'

- name: Clear out kubectx git repository folder
  file:
    path: /opt/kubectx
    state: absent
- name: Clone kubectx repository
  git:
    repo: https://github.com/ahmetb/kubectx
    dest: /opt/kubectx
    version: master
- name: Symlink kubectx and kubens executables
  file:
    src: "/opt/kubectx/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    state: link
  with_items:
  - kubectx
  - kubens

- name: Clear old k9s downloaded archive and binary
  file:
    path: "{{ item }}"
    state: absent
  with_items:
  - /tmp/k9s.tar.gz
  - /usr/local/bin/k9s
- name: Fetch k9s archive
  get_url:
    url: "{{ urls.k9s }}"
    dest: /tmp/k9s.tar.gz
- name: Unpack k9s binary from archive
  unarchive:
    src: /tmp/k9s.tar.gz
    remote_src: yes
    dest: /usr/local/bin

- name: Clear old fzf downloaded archive and binary
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/fzf.tar.gz
    - /usr/local/bin/fzf
- name: Download fzf from GitHub
  get_url:
    url: "{{ urls.fzf }}"
    dest: /tmp/fzf.tar.gz
- name: Unpack fzf
  unarchive:
    src: /tmp/fzf.tar.gz
    dest: /usr/local/bin/
    remote_src: yes

- name: Install ripgrep
  apt:
    pkg: ripgrep
    state: present

- name: Install ffmpeg as a dependency for yt-dlp conversion features
  apt:
    pkg: ffmpeg
    state: present
- name: Check if yt-dlp is already installed
  stat:
    path: /usr/local/bin/yt-dlp
  register: yt_dlp_check
- name: Download yt-dlp executable
  get_url:
    url: "{{ urls.yt_dlp }}"
    dest: /usr/local/bin
    mode: '775'
  when: not yt_dlp_check.stat.exists
- name: Force update of yt-dlp
  shell: /usr/local/bin/yt-dlp -U
  register: stdout
  when: yt_dlp_check.stat.exists
- name: Print update status of yt-dlp
  debug:
    var: stdout.stdout_lines
- name: Ensure that bin directory exists
  file:
    path: /home/kelog/bin
    state: directory
- name: Put yt-dlp video download script
  template:
    src: ../files/yy.sh
    dest: /home/kelog/bin/yy.sh
    mode: '755'
- name: Put yt-dlp audio download script
  vars:
    yt_dlp_extra_args: "-x --audio-format=mp3"
  template:
    src: ../files/yy.sh
    dest: /home/kelog/bin/yymp3.sh
    mode: '755'
